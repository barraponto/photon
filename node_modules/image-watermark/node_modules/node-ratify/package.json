{
  "name": "node-ratify",
  "version": "1.0.5",
  "description": "A rich and efficient node validation library for String, Number, Date and Javascript Objects",
  "main": "./validate.js",
  "keywords": [
    "validator",
    "validation",
    "validate",
    "assert",
    "node-validate",
    "node-validation",
    "ratify",
    "node-valid",
    "valid",
    "node-ratify",
    "validationUtils"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/luthraG/node-validate.git"
  },
  "bugs": {
    "url": "https://github.com/luthraG/node-validate/issues"
  },
  "author": {
    "name": "Gaurav Luthra",
    "email": "luthra.zenith@gmail.com"
  },
  "license": "MIT",
  "readme": "# node-ratify\n\nA library of string validators.\n\n## Installation\n\n\t'npm install node-ratify'\n\n### Server-side usage\n\n```javascript\nvar ratify = require('node-ratify');\n\nratify.isBase64('bm9kZS1yYXRpZnk='); // true\n```\n\n### Clone the repo\n\ngit clone https://github.com/luthraG/node-validate.git\n\n### Validators\n\n- **hasAnyMethod(obj)** - check if the object has any method present inside it.\n- **isAlpha(str)** - check if the string contains only alphabets, both upper and lower case.\n- **isAlphanumeric(str)** - check if the string contains alphabets and numbers.\n- **isArray(value)** - check if the value passed is Array.\n- **isAscii(value)** - check if the string contains only ascii characters.\n- **isBase64(str)** - check if a string is base64 encoded.\n- **isBlank(str)** - check if a string is blank.\n- **isBoolean(str)** - Check if the value is boolean value i.e. true, false, 1, or 0.\n- **contains(str)** - check if the string contains another string(Case sensitive search).\n- **containsIgnoreCase(str)** - check if the string contains another string(Case insensitive search).\n- **containsKey(obj, key)** - Safely reach into a object and returns true if specified key is present.\n- **containsDeepKey(obj)** - Safely reach into a 'nested' object and returns true if specified key is present. \n- **isEmpty(str)** - check if a string is empty. A string containing only whitespaces is blank string but not empty string.\n- **isHexadecimal(str)** - Check if the string is a hexadecimal number.\n- **isFalse(value)** - check if the value passed is false.\n- **isFunction(value)** - check if the value is function or not.\n- **isJSON(str)** - check if a string is a valid JSON string.\n- **isLowerCase(str)** - check if a string is in lowercase.\n- **isMethodPresent(obj, methodName)** - check if the object has the specified method present inside it.\n- **isNull(value)** - check if the value is null or undefined or Nan.\n- **isNumber(value)** - check if the value passed is Number object.\n- **isNumeric(str)** - check if a string is number(Integer/Floating point et al.).\n- **isObject(value)** - check if the value passed is Object.\n- **objectEquals(obj1, obj2)** - check if two objects(String, Object, Number, Date, function, RegExp, Array) are equal or not.\n- **isPalindrome(str)** - check if input string is a palindrome or not.\n- **isRegExp(value)** - check if the value is RegExp or not.\n- **isStrictBoolean(value)** - check if the value is boolean object or not.\n- **isStrictObject(value)** - check if the value is Object or not.\n- **isString(value)** - check if the value passed is string.\n- **isTitleCase(value)** - check is the string is title case i.e. first letter of each word in the string is capital case.\n- **isTrue(value)** - check if the value passed is true.\n- **isUpperCase(str)** - check if a string is in uppercase.\n- **isURIEncoded(str)** - check if String is URI encoded.\n- **isUUID(str)** - check if the specified string is uuid(of specified version).\n- **isValidEmail(str)** - check if the string is a valid email address.\n- **isWhiteSpace(str)** - check if a string contains only whitespaces.\n\n### Examples\n\n```javascript\nvar ratify = require('node-ratify');\n\n// Check if the value is string or not\nratify.isString(new String('hello')); // returns true\n\n// Check if the value is Number or not\nratify.isNumber(7); // returns true\nratify.isNumber(false); // returns false\n\n// Check if the value is Array or not\nratify.isArray('7'); // returns false\nratify.isArray(['5', '7']); // returns true\n\n// Check if the value is Object or not \n// (Value could be String object, Number Object, Array Object, Date object etc.)\nratify.isObject(new Array(7, 11)); // returns true\nratify.isObject(''); // returns false\n\n// Check if the value is Object or not \nratify.isStrictObject({}); // returns true\nratify.isStrictObject(new Array(7, 11)); // returns false\n\n// Check if the value is RegExp or not\nratify.isRegExp('/abc/'); // returns false\nratify.isRegExp(/abc/); // returns true\n\n// Check if the value is Boolean object or not\nratify.isStrictBoolean(false) // returns true\n\n// Check if the value is Boolean or not\nratify.isBoolean() // returns false\nratify.isBoolean(1) // returns true\nratify.isBoolean(false) // returns true\n\n// Check if the value is Function or not\nfunction test() {return true;}\nfunction test2() {};\nvar arr = ['Item1', 'Item2', 'Item3'];\nvar obj = {};\n\nratify.isFunction(test) // returns true\nratify.isFunction(test2) // returns true\nratify.isFunction(arr) // returns false\nratify.isFunction(obj) // returns false\nratify.isFunction(null) // returns false\n\n// Check if the string is a lowercase string\nratify.isLowerCase('gaurav') // returns true\nratify.isLowerCase() // returns false\n\n// Check if the string is a uppercase string\nratify.isUpperCase('GAURAV') // returns true\nratify.isUpperCase() // returns false\n\n// Check is the string is title case \n// i.e. first letter of each word in the string is capital case\nratify.isTitleCase('hello World') // returns false\nratify.isTitleCase('HATs Off To YOU') // returns true\n\n// Check if the string is a number\nratify.isNumeric('7') // returns true\nratify.isNumeric(-Infinity) // returns true\n\n// Check if the string/object is valid JSON\nvar a = {a : 'a', b : 'b', c : 'c', d : 'd'};\nvar b = {a : 'a', b : 'b', c : { x : 'x', y : 'y', z : \n\t\t\t{ key1 : 'value1', key2 : 'value2'}}};\nvar c = {a : 'a', b : 'b', c : { x : 'x', y : 'y', z : \n\t\t\t{ key1 : 'value1', key2 : 'value2', }}};  // Extra comma\n\nratify.isJSON(\"\\n{\\\"a\\\" : \\\"5\\\"}\\n\"); // returns true\nratify.isJSON(a); // returns true\nratify.isJSON(b); // returns true\nratify.isJSON(c); // returns true\nratify.isJSON('/abc/'); // returns false\n\n// Check if the string is base64 encoded\nratify.isBase64('gaurav') // returns false\nratify.isBase64('Zm9vYg==') // returns true\n\n// Check if the string contains only alphabets, both upper and lower case\nratify.isAlpha()  // returns false\nratify.isAlpha('asd')  // returns true\nratify.isAlpha('123')  // returns false\n\n// Check if the string contains alphabets and numbers\nratify.isAlphanumeric('abc') // returns true\nratify.isAlphanumeric(new Object()) // returns false\nratify.isAlphanumeric('134766678') // returns true\n\n// Check if the string is a hexadecimal number\nratify.isHexadecimal('1f') // returns true\nratify.isHexadecimal('0x1F') // returns false\nratify.isHexadecimal('efa0123') // returns true\n\n// Check if the string contains only ascii characters\nratify.isAscii('ᴁᴪᴙݝۺ') // returns false\nratify.isAscii(undefined) // returns false\n\n// Check if the value is null\nratify.isNull(false) // returns false\nratify.isNull(0/0) // returns true\n\n// Check if the string is a valid email address\nratify.isValidEmail('luthra.zenith@google.com'); // returns true\nratify.isValidEmail('luthra.zenithgoogle.com'); // returns false\n\n// Check if the specified string is uuid(of specified version)\nratify.isUUID('4925123f-85a1-46bd-bfef-14026fbd4800', 4); // returns true\nratify.isUUID('4956123f-89a1-36bd-cfef-14026fbd1270', 3); // returns true\n\n// Check if String is URI encoded\nratify.isURIEncoded('gaurav'); // returns true\n\n// Check if the string doesn't contain anything\nratify.isEmpty(null); // returns true\nratify.isEmpty(''); // returns true\nratify.isEmpty('    '); // returns false\n\n// Check if the string contains only whitespaces\nratify.isWhiteSpace('    '); // returns true\nratify.isWhiteSpace(null); // returns false\n\n// Check if the string is blank : i.e. \n// either it is empty or only contains whitespaces\nratify.isBlank(''); // returns true\nratify.isBlank('    '); // returns true\n\n// Check if the string contains another string(Case sensitive search)\nvar baseStr = 'This is me and that is you';\nvar searchStr = 'this';\n\nratify.contains(baseStr, searchStr); // returns false\nratify.contains(baseStr, 'This'); // returns true\n\n// Check if the string contains another string(Case insensitive search)\nvar baseStr = 'This is this and that is that';\nvar searchStr = 'this';\n\nratify.containsIgnoreCase(baseStr, searchStr); // returns true\nratify.containsIgnoreCase(baseStr, 'hello'); // returns false\n\n// Safely search into a object and returns true if specified key is present. \n// Returns false if the intended target is not present.\n\nvar o = { qwe : { asd : { zxc : 123 } } };\nratify.containsKey(o, 'qwe'); // returns true\nratify.containsKey(o, 'zxc'); // returns false, as it is not present at top level\n\n// Safely reach into a nested object and returns true if specified key is present. \n// Returns false if any of the intermediate subobjects or the intended target are not present.\n\nvar o = { qwe : { asd : { zxc : 123 } } };\nratify.containsDeepKey(o, 'qwe'); // returns true\nratify.containsDeepKey(o, 'zxc'); // returns true\nratify.containsDeepKey(o, 'qwe', 'asd'); // returns true\n\n// Check if input string is a palindrome or not\n\nvar str1 = 'abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba';\nvar str2 = 'eye';\nvar str3 = 'Hello';\n\nratify.isPalindrome(str1); // returns true\nratify.isPalindrome(str2); // returns true\nratify.isPalindrome(str3); // returns false\n\n// Check if two objects(String, Object, Number, Date, function, RegExp, Array)\n// are equal\n\nvar o = { qwe : { asd : { zxc : 123 } } };\nvar m = { qwe : { asd : { zxc : 123 } } };\n\nratify.objectEquals(o, m); // returns true\nratify.objectEquals(new Number(5), 5); // returns true\nratify.objectEquals(['1', '2', '3'], ['3', '2', '1']); // returns false\n\n// Check if the object has any method present inside it\n\nvar o = { qwe : { asd : { zxc : 123 } } };\nvar m = { qwe : 123, dummy : function() {console.log('Hello')} };\n\nratify.hasAnyMethod(o); // returns false\nratify.hasAnyMethod(m); // returns true\n\n// Check if the object has the specified method present inside it\n\nvar o = { qwe : { asd : { zxc : 123 } } };\nvar m = { qwe : 123, dummy : function() {console.log('Hello')} };\n\nratify.isMethodPresent(o); // returns false\nratify.isMethodPresent(null); // returns false\nratify.isMethodPresent(m); // returns false\nratify.isMethodPresent(m, 'dummy'); // returns true\n\n```\n\n### License(MIT)\n\nCopyright (c) 2015 Gaurav Luthra(luthra.zenith@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "node-ratify@1.0.5",
  "dist": {
    "shasum": "e49d375f581836780e46760888635fb420ff91d0"
  },
  "_from": "node-ratify@",
  "_resolved": "https://registry.npmjs.org/node-ratify/-/node-ratify-1.0.5.tgz"
}
