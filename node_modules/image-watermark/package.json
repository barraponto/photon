{
  "name": "image-watermark",
  "version": "0.0.7",
  "description": "A powerful watermark library for image and pdf files based on ImageMagick for node.js",
  "main": "./watermark.js",
  "dependencies": {
    "imagemagick": "",
    "node-ratify": ""
  },
  "keywords": [
    "watermark",
    "image-watermark",
    "pdf-watermark",
    "imagemagick",
    "add watermark"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/luthraG/image-watermark.git"
  },
  "bugs": {
    "url": "https://github.com/luthraG/image-watermark/issues"
  },
  "author": {
    "name": "Gaurav Luthra",
    "email": "luthra.zenith@gmail.com"
  },
  "license": "MIT",
  "readme": "# image-watermark\nA powerful watermark library based on ImageMagick for node.js. This can be used to embed watermark in single page image, multipage image or pdf file.\n\n### Installation\n\n\t'npm install image-watermark'\n\n### Server-side usage\n\n```javascript\nvar watermark = require('image-watermark');\n\nwatermark.embedWatermark('/path/to/image_or_pdf/file', [options]);\n```\n\n### Clone the repo\n\ngit clone https://github.com/luthraG/image-watermark.git\n\n### API\n\n#### embedWatermark(source, [options])\n\nAPI to embed watermark in given image/pdf. It takes two arguments : \n1. path of the image and \n2. options object. This argument is optional\n\n\n**Options**\n\nVarious options supported by this API are :\n- **text** - To specify watermark text. Default is 'Sample watermark'.\n- **color** - To specify color of watermark text. Default is 'Grey'.\n- **dstPath** - To specify the output path. Default is 'watermark.{sourceFile ext}'.\n- **override-image** - To specify if same image needs to be overriden. Default is 'false'.\n- **change-format** - To specify if the format of output file needs to be changed. Default is 'false'.\n- **output-format** - Used in conjuction with change-format to specify the format of output file.\n- **align** - To specify the watermark text alignment. Default is 'dia1'.\n- **font** - To specify font of watermark text.\n- **resize** - To specify the resize percentage for output file.\n\n**Example**\n\n```javascript\nvar watermark = require('image-watermark');\n\nwatermark.embedWatermark('\\home\\user\\sample.jpg', {'text' : 'sample watermark'});\n```\n\n**Different Options**\n\n```javascript\n//\n// Options with watermark text, if not provided defaults to 'Sample watermark'\n//\nvar watermark = require('image-watermark');\nwatermark.embedWatermark('\\home\\user\\sample.jpg', {'text' : 'sample watermark'});\n\n//\n// Options to specify output path\n//\nvar watermark = require('image-watermark');\nvar options = {\n\t'text' : 'sample watermark', \n\t'dstPath' : '\\home\\user\\documents\\watermark.jpg'\n};\nwatermark.embedWatermark('\\home\\user\\sample.jpg', options);\n\n//\n// Options to specify color of watermark text\n//\nvar watermark = require('image-watermark');\nvar options = {\n\t'text' : 'sample watermark', \n\t'color' : 'rgb(154, 50, 46)'\n};\nwatermark.embedWatermark('\\home\\user\\sample.jpg', options);\n\n// color can be specified in one of the following forms\ngrey\t\t\t\t\t  #color-name\n#f00                      #rgb\n#ff0000                   #rrggbb\n#ff0000ff                 #rrggbbaa\n#ffff00000000             #rrrrggggbbbb\n#ffff00000000ffff         #rrrrggggbbbbaaaa\nrgb(255, 0, 0)            an integer in the range 0—255 for each component\nrgb(100.0%, 0.0%, 0.0%)   a float in the range 0—100% for each component\n\n\n//\n// Options to specify resize factor i.e. if image needs to be resized\n// after adding watermark text\n//\nvar watermark = require('image-watermark');\nvar options = {\n\t'text' : 'sample watermark', \n\t'resize' : '200%'\n};\nwatermark.embedWatermark('\\home\\user\\sample.jpg', options);\n\n\n//\n// Options to override same image i.e. if same image needs to\n// be overriden after adding watermark, By default is false\n//\nvar watermark = require('image-watermark');\nvar options = {\n\t'text' : 'sample watermark', \n\t'override-image' : true\n};\nwatermark.embedWatermark('\\home\\user\\sample.jpg', options);\n\n// This overrides the same image, if not specified it creates\n// output image parallel to this image with name \"watermark\"\n\n//\n// Options to change the format of image\n//\nvar watermark = require('image-watermark');\nvar options = {\n\t'text' \t\t\t: 'sample watermark', \n\t'change-format' : true,\n\t'output-format' : 'bmp'\n};\nwatermark.embedWatermark('\\home\\user\\sample.jpg', options);\n\n//\n// Options to specify the font of watermark text\n//\nvar watermark = require('image-watermark');\nvar options = {\n\t'text' : 'sample watermark', \n\t'font' : 'Arial.ttf'\n};\nwatermark.embedWatermark('\\home\\user\\sample.jpg', options);\n\n//\n// Options to specify the alignment of watermark text\n//\nvar watermark = require('image-watermark');\nvar options = {\n\t'text' : 'sample watermark', \n\t'align' : 'ltr'\n};\nwatermark.embedWatermark('\\home\\user\\sample.jpg', options);\n\n// Various possble values of align are:\n\n//\n// dia1 : Diagonal 1\n// dia2 : Diagonal 2\n// ttb : top to bottom\n// btt : bottom to top\n// ltr : left to right\n// rtl : right to left\n//\n\n// If an invalid value is specified or in case no value\n// is specified then 'dial1' is treated as default alignment\n\n```\n\n#### embedWatermarkWithCb(source, [options], callback)\nAPI to embed watermark in given image/pdf with callback method. It takes three arguments : \n1. path of the image and \n2. options object. This argument is optional\n3. The callback method\n\n\n```javascript\n\n// Embed watermark with option object and callback method\nvar watermark = require('image-watermark');\nvar option = {'text' : 'sample watermark'};\n\nwatermark.embedWatermarkWithCb('\\home\\user\\sample.jpg', option, function(err) {\n\tif (!err)\n\t\tconsole.log('Succefully embeded watermark');\n});\n\n// Embed watermark with no option object and callback method\nvar watermark = require('image-watermark');\n\nwatermark.embedWatermarkWithCb('\\home\\user\\sample.jpg', function(err) {\n\tif (!err)\n\t\tconsole.log('Succefully embeded watermark');\n});\n\n```\n\n#### version\n\nAPI to get version of this module that you are using.\n\n```javascript\nvar watermark = require('image-watermark');\n\nwatermark.version;\n\n// It outputs version of the API.\n```\n\n### Inspiration\n[https://www.npmjs.com/package/imagemagick](https://www.npmjs.com/package/imagemagick)\n\n### License(MIT)\n\nCopyright (c) 2015 Gaurav Luthra(luthra.zenith@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "image-watermark@0.0.7",
  "dist": {
    "shasum": "59ef5a8f56bd0b8d2bc798c78666d7aebdc7b5e9"
  },
  "_from": "image-watermark@",
  "_resolved": "https://registry.npmjs.org/image-watermark/-/image-watermark-0.0.7.tgz"
}
